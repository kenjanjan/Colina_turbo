name: Deploy to EC2 Instances

on:
  push:
    branches:
      - main # Trigger on push to main branch

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to DockerHub
        run: echo "${{ secrets.DOCKERHUB_ACCESS_TOKEN }}" | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

      # Build and Push Docker image for the backend (NestJS)
      - name: Build and Push backend Docker image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/nestjs-backend ./apps/nestjs
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/nestjs-backend
      
      # Upload backend Docker image as an artifact (optional)
      - name: Upload backend image
        uses: actions/upload-artifact@v3
        with:
          name: nestjs-backend-image
          path: ./apps/nestjs

      # Add SSH key from PEM file
      - name: Add SSH key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" | base64 --decode > /tmp/ec2-key.pem
          chmod 600 /tmp/ec2-key.pem
        shell: bash

      # Deploy NestJS to Backend EC2 instance
      - name: Deploy NestJS to EC2 Backend
        run: |
          ssh -i /tmp/ec2-key.pem -o StrictHostKeyChecking=no -v ubuntu@${{ secrets.EC2_BACKEND_IP }} << 'EOF'
            # Check if the container exists before stopping/removing it
            CONTAINER_NAME="nestjs-backend"

            if sudo docker ps -q --filter "name=$CONTAINER_NAME"; then
              echo "Stopping and removing existing container..."
              sudo docker stop $CONTAINER_NAME
              sudo docker rm $CONTAINER_NAME
            else
              echo "No existing container found."
            fi

            # Pull the latest image from Docker Hub
            IMAGE_NAME="${{ secrets.DOCKERHUB_USERNAME }}/nestjs-backend:latest"
            echo "Pulling latest image from Docker Hub..."
            if sudo docker pull $IMAGE_NAME; then
              echo "Image pulled successfully."
            else
              echo "Failed to pull image. Please check your Docker Hub credentials and image name."
              exit 1
            fi

            # Run the new container
            echo "Running new container..."
            sudo docker run -d -p 3000:3000 --name $CONTAINER_NAME $IMAGE_NAME
          EOF

      # Build and Push Docker image for the frontend (Next.js)
      - name: Build and Push frontend Docker image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/nextjs-frontend ./apps/nextjs
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/nextjs-frontend

      # Upload frontend Docker image as an artifact (optional)
      - name: Upload frontend image
        uses: actions/upload-artifact@v3
        with:
          name: nextjs-frontent-image
          path: ./apps/nextjs

      # Deploy Next.js to Frontend EC2 instance
      - name: Deploy Next.js to EC2 Frontend
        run: |
          ssh -i /tmp/ec2-key.pem -o StrictHostKeyChecking=no -v ubuntu@${{ secrets.EC2_FRONTEND_IP }} << 'EOF'
            # Stop the current Docker container if running
            CONTAINER_NAME="nextjs-frontend"
            if sudo docker ps -q --filter "name=$CONTAINER_NAME"; then
              echo "Stopping and removing existing container..."
              sudo docker stop $CONTAINER_NAME
              sudo docker rm $CONTAINER_NAME
            else
              echo "No existing container found."
            fi

            # Pull the latest image from Docker Hub
            IMAGE_NAME="${{ secrets.DOCKERHUB_USERNAME }}/nextjs-frontend:latest"
            echo "Pulling latest image from Docker Hub..."
            if sudo docker pull $IMAGE_NAME; then
              echo "Image pulled successfully."
            else
              echo "Failed to pull image. Please check your Docker Hub credentials and image name."
              exit 1
            fi

            # Run the new container
            echo "Running new container..."
            sudo docker run -d -p 3001:3001 --name $CONTAINER_NAME $IMAGE_NAME
          EOF